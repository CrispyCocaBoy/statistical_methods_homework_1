log_prec <- TP_log / (TP_log + FP_log)
log_rec <- TP_log / (TP_log + FN_log)
log_f1 <- 2 * log_prec * log_rec / (log_prec + log_rec)
# Confusion matrix KNN
cm_knn <- table(Predicted = knn_pred, Actual = truth_knn)
TP_knn <- sum(cm_knn["Yes", "Yes"])
TN_knn <- sum(cm_knn["No", "No"])
FP_knn <- sum(cm_knn["Yes", "No"])
FN_knn <- sum(cm_knn["No", "Yes"])
knn_acc <- (TP_knn + TN_knn) / (TP_knn + TN_knn + FP_knn + FN_knn)
knn_prec <- TP_knn / (TP_knn + FP_knn)
knn_rec <- TP_knn / (TP_knn + FN_knn)
knn_f1 <- 2 * knn_prec * knn_rec / (knn_prec + knn_rec)
# Comparison table
model_eval <- data.frame(
Model = c("Logistic Regression", "KNN (k = 29)"),
Accuracy = c(log_acc, knn_acc),
Precision = c(log_prec, knn_prec),
Recall = c(log_rec, knn_rec),
F1_Score = c(log_f1, knn_f1)
)
print(model_eval)
table(Prevision = logistic_pred, Real = test_data$CHD)
table(Prevision = knn_pred, Real = truth_knn)
#| echo: false
roc_score <- roc(response = as.numeric(test_data$CHD) - 1, predictor = logistic_probs)
roc_df <- data.frame(
FPR = 1 - roc_score$specificities,
TPR = roc_score$sensitivities
)
opt <- coords(roc_score, "best", best.method = "closest.topleft")
ggplot(roc_df, aes(x = FPR, y = TPR)) +
geom_line(color = "#0072B2", linewidth = 1.2) +
geom_abline(linetype = "dashed", color = "gray") +
annotate("point",
x = 1 - as.numeric(opt["specificity"]),
y = as.numeric(opt["sensitivity"]),
color = "red", size = 2.5) +
annotate("text", x = 0.6, y = 0.2,
label = paste0("AUC = ", round(auc(roc_score), 3)), size = 4) +
labs(
title = "ROC Curve – Logistic Regression",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)"
) +
theme_minimal()
print(paste("best_threshold:" opt$)
#| echo: false
roc_score <- roc(response = as.numeric(test_data$CHD) - 1, predictor = logistic_probs)
roc_df <- data.frame(
FPR = 1 - roc_score$specificities,
TPR = roc_score$sensitivities
)
opt <- coords(roc_score, "best", best.method = "closest.topleft")
ggplot(roc_df, aes(x = FPR, y = TPR)) +
geom_line(color = "#0072B2", linewidth = 1.2) +
geom_abline(linetype = "dashed", color = "gray") +
annotate("point",
x = 1 - as.numeric(opt["specificity"]),
y = as.numeric(opt["sensitivity"]),
color = "red", size = 2.5) +
annotate("text", x = 0.6, y = 0.2,
label = paste0("AUC = ", round(auc(roc_score), 3)), size = 4) +
labs(
title = "ROC Curve – Logistic Regression",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)"
) +
theme_minimal()
print(paste("best_threshold:" opt$threshold)
#| echo: false
roc_score <- roc(response = as.numeric(test_data$CHD) - 1, predictor = logistic_probs)
roc_df <- data.frame(
FPR = 1 - roc_score$specificities,
TPR = roc_score$sensitivities
)
opt <- coords(roc_score, "best", best.method = "closest.topleft")
ggplot(roc_df, aes(x = FPR, y = TPR)) +
geom_line(color = "#0072B2", linewidth = 1.2) +
geom_abline(linetype = "dashed", color = "gray") +
annotate("point",
x = 1 - as.numeric(opt["specificity"]),
y = as.numeric(opt["sensitivity"]),
color = "red", size = 2.5) +
annotate("text", x = 0.6, y = 0.2,
label = paste0("AUC = ", round(auc(roc_score), 3)), size = 4) +
labs(
title = "ROC Curve – Logistic Regression",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)"
) +
theme_minimal()
paste(print("best_threshold:" opt$threshold)
#| echo: false
roc_score <- roc(response = as.numeric(test_data$CHD) - 1, predictor = logistic_probs)
roc_df <- data.frame(
FPR = 1 - roc_score$specificities,
TPR = roc_score$sensitivities
)
opt <- coords(roc_score, "best", best.method = "closest.topleft")
ggplot(roc_df, aes(x = FPR, y = TPR)) +
geom_line(color = "#0072B2", linewidth = 1.2) +
geom_abline(linetype = "dashed", color = "gray") +
annotate("point",
x = 1 - as.numeric(opt["specificity"]),
y = as.numeric(opt["sensitivity"]),
color = "red", size = 2.5) +
annotate("text", x = 0.6, y = 0.2,
label = paste0("AUC = ", round(auc(roc_score), 3)), size = 4) +
labs(
title = "ROC Curve – Logistic Regression",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)"
) +
theme_minimal()
paste("best_threshold:" opt$threshold)
#| echo: false
roc_score <- roc(response = as.numeric(test_data$CHD) - 1, predictor = logistic_probs)
roc_df <- data.frame(
FPR = 1 - roc_score$specificities,
TPR = roc_score$sensitivities
)
opt <- coords(roc_score, "best", best.method = "closest.topleft")
ggplot(roc_df, aes(x = FPR, y = TPR)) +
geom_line(color = "#0072B2", linewidth = 1.2) +
geom_abline(linetype = "dashed", color = "gray") +
annotate("point",
x = 1 - as.numeric(opt["specificity"]),
y = as.numeric(opt["sensitivity"]),
color = "red", size = 2.5) +
annotate("text", x = 0.6, y = 0.2,
label = paste0("AUC = ", round(auc(roc_score), 3)), size = 4) +
labs(
title = "ROC Curve – Logistic Regression",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)"
) +
theme_minimal()
print(paste("best_threshold:", opt$threshold))
?glm
logistic_regression <- glm(
formula = CHD ~ sex + age + education + smoker + cpd + stroke + HTN + diabetes + chol + DBP + BMI + HR,
data = train_data,
family = "binomial"
)
# Chunk 1: setup
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
tidy = TRUE,
tidy.opts = list(width.cutoff = 80)
)
# Chunk 2
#| include: false
rm(list=ls())
library(pROC)
library(tidyverse)
library(tidymodels)
library(dplyr)
library(patchwork)
library(DescTools)
library(readr)
library(class)
library(kableExtra)
library(skimr)
library(factoextra)
theme_set(theme_minimal())
dataf <- read_csv("CHD_data.csv")
tibble(dataf)
# Chunk 3
#| echo: false
# Data cleaning
# remove na
dataf <- na.omit(dataf)
# factor
dataf <- dataf %>%
mutate(sex = as.factor(sex)) %>%
mutate(education = as.factor(education)) %>%
mutate(CHD = as.factor(CHD)) %>%
mutate(education = recode(education,
"1" = "no HS degree",
"2" = "HS graduate",
"3" = "college graduate",
"4" = "post-college"
)) %>%
mutate(smoker = as.factor(smoker)) %>%
mutate(smoker = recode(smoker,
"1" = "yes",
"0" = "no")) %>%
mutate(stroke = as.factor(stroke)) %>%
mutate(stroke = recode(stroke,
"1" = "yes",
"0" = "no")) %>%
mutate(HTN = as.factor(HTN)) %>%
mutate(HTN = recode(HTN,
"1" = "yes",
"0" = "no")) %>%
mutate(diabetes = as.factor(diabetes)) %>%
mutate(diabetes = recode(diabetes,
"1" = "yes",
"0" = "no"))
summary(dataf)
# Chunk 4
#| echo: false
CHD <- ggplot(as.data.frame(table(dataf$CHD)), aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of CHD",
x = "CHD",
y = "Count",
fill = "") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
sex <- ggplot(as.data.frame(table(dataf$sex)), aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of sex",
x = "Sex",
y = "Count",
fill = "") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
CHD + sex
education <- ggplot(as.data.frame(table(dataf$education)), aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Education",
x = "Education",
y = "Count",
fill = "") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
smoker <- ggplot(as.data.frame(table(dataf$smoker)), aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of smoker",
x = "smoker",
y = "Count",
fill = "") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
education + smoker
stroke <- ggplot(as.data.frame(table(dataf$stroke)), aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of stroke",
x = "stroke",
y = "Count",
fill = "") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
HTN <- ggplot(as.data.frame(table(dataf$HTN)), aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of Hypertension",
x = "Hypertension",
y = "Count",
fill = "") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
diabetes <- ggplot(as.data.frame(table(dataf$diabetes)), aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(title = "Distribution of diabetes",
x = "diabetes",
y = "Count",
fill = "") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
stroke + HTN + diabetes
rm(CHD, sex, stroke, HTN, diabetes, education, smoker)
# Chunk 5
#| echo: false
# Singoli plot
Age <- ggplot(dataf, aes(x = CHD, y = age, fill = CHD)) +
geom_boxplot() +
labs(title = "Age by CHD", x = "", y = "Age") +
theme_minimal() +
theme(legend.position = "none")
Cholesterol <- ggplot(dataf, aes(x = CHD, y = chol, fill = CHD)) +
geom_boxplot() +
labs(title = "Cholesterol by CHD", x = "", y = "Cholesterol") +
theme_minimal() +
theme(legend.position = "none")
HR <- ggplot(dataf, aes(x = CHD, y = HR, fill = CHD)) +
geom_boxplot() +
labs(title = "HR by CHD", x = "", y = "HR") +
theme_minimal() +
theme(legend.position = "none")
BMI <- ggplot(dataf, aes(x = CHD, y = BMI, fill = CHD)) +
geom_boxplot() +
labs(title = "BMI by CHD", x = "", y = "BMI") +
theme_minimal() +
theme(legend.position = "none")
(Age | Cholesterol | HR | BMI)
rm(Age, Cholesterol, HR, BMI)
# Chunk 6
#| echo: false
library(ggplot2)
library(patchwork)
# Age
Age <- ggplot(dataf, aes(x = age, fill = CHD, color = CHD)) +
geom_density(alpha = 0.4, lwd = 1) +
labs(title = "Age Density by CHD Status", x = "Age", y = "Density") +
theme_minimal()
# Cholesterol
Cholesterol <- ggplot(dataf, aes(x = chol, fill = CHD, color = CHD)) +
geom_density(alpha = 0.4, lwd = 1) +
labs(title = "Cholesterol Density by CHD Status", x = "Cholesterol", y = "Density") +
theme_minimal()
# Heart Rate
HR <- ggplot(dataf, aes(x = HR, fill = CHD, color = CHD)) +
geom_density(alpha = 0.4, lwd = 1) +
labs(title = "HR Density by CHD Status", x = "HR", y = "Density") +
theme_minimal()
# BMI
BMI <- ggplot(dataf, aes(x = BMI, fill = CHD, color = CHD)) +
geom_density(alpha = 0.4, lwd = 1) +
labs(title = "BMI Density by CHD Status", x = "BMI", y = "Density") +
theme_minimal()
# 2x2 Layout
(Age + Cholesterol) / (HR + BMI)
rm(Age, Cholesterol, HR, BMI)
# Chunk 7
#| echo: false
corr_test_data <- dataf %>% select(sex, education, smoker, HTN, CHD)
# Creare the function
corr_test_check <- function(data) {
res <- data.frame(Variable1 = character(),
Variable2 = character(),
p_value = numeric(),
Cramer_V = numeric())
var_combos <- combn(names(data), 2)
for (i in 1:ncol(var_combos)) {
v1 <- var_combos[1, i]
v2 <- var_combos[2, i]
tbl <- table(data[[v1]], data[[v2]])
test <- suppressWarnings(chisq.test(tbl))  # evita warning su expected freq
# Cramér's V
n <- sum(tbl)
k <- nrow(tbl)
r <- ncol(tbl)
v_cramer <- sqrt(as.numeric(test$statistic) / (n * min(k - 1, r - 1)))
if (test$p.value < 0.001) {
res <- rbind(res,
data.frame(Variable1 = v1,
Variable2 = v2,
p_value = test$p.value,
Cramer_V = v_cramer),
row.names = NULL)
}
}
return(res)
}
corr_results <- corr_test_check(corr_test_data)
corr_results
rm(corr_results, corr_test_data, corr_test_check)
# Chunk 8
#| include: false
set.seed(5)
df_split <- initial_split(dataf, prop = 0.5, strata = "CHD")
train_data <- training(df_split)
test_data <- testing(df_split)
# Chunk 9
#| echo: false
lr_spec <- logistic_reg(
mode = "classification",
engine = "glm")
lr_fit <- lr_spec %>%
fit(CHD ~ sex + age + education + smoker + cpd + stroke + HTN + diabetes + chol + DBP + BMI + HR,
data = train_data
)
summary(lr_fit$fit)
# Chunk 10
#| echo: false
set.seed(100)
# Preprocess for the knn
# - Normalization of the data
# - Dummy variable for the categorical
full_data <- rbind(test_data, train_data)
full_data <- full_data %>%
mutate(
# Recode factors back to original numeric codes
sex = recode(sex,
"male" = "0",
"female" = "1"),
education = recode(education,
"no HS degree" = "1",
"HS graduate" = "2",
"college graduate" = "3",
"post-college" = "4"),
smoker = recode(smoker,
"no" = "0",
"yes" = "1"),
stroke = recode(stroke,
"no" = "0",
"yes" = "1"),
HTN = recode(HTN,
"no" = "0",
"yes" = "1"),
diabetes = recode(diabetes,
"no" = "0",
"yes" = "1"),
) %>%
# Convert to numeric
mutate(across(c(education, smoker, stroke, HTN, diabetes),
~ as.numeric(as.character(.))))
features <- c("sex", "age", "education", "smoker", "cpd", "stroke",
"HTN", "diabetes", "chol", "DBP", "BMI", "HR")
df_num <- full_data %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), as.numeric))
# Re split of the data
n <- nrow(full_data)
half <- floor(n / 2)
X_test <- df_num[1:half, features]
X_train <- df_num[(half + 1):n, features]
y_test <- df_num[1:half, "CHD", drop = TRUE]
y_train <- df_num[(half + 1):n, "CHD", drop = TRUE]
# 4. Normalizzazione basata sul training
means <- apply(X_train, 2, mean)
sds <- apply(X_train, 2, sd)
X_train_norm <- scale(X_train, center = means, scale = sds)
X_test_norm  <- scale(X_test, center = means, scale = sds)
# 1. Vettori per k
k_values <- 1:30
train_errors <- numeric(length(k_values))
test_errors <- numeric(length(k_values))
# 2. Calcolo errori per ogni k
for (i in seq_along(k_values)) {
k <- k_values[i]
train_pred <- knn.cv(train = X_train_norm, cl = y_train, k = k)
train_errors[i] <- mean(train_pred != y_train)
test_pred <- knn(train = X_train_norm, test = X_test_norm, cl = y_train, k = k)
test_errors[i] <- mean(test_pred != y_test)
}
df_plot <- data.frame(
k = k_values,
inv_k = 1 / k_values,
Train = train_errors,
Test = test_errors
) %>%
pivot_longer(cols = c("Train", "Test"), names_to = "Set", values_to = "Error")
min_index <- which.min(test_errors)
best_k <- k_values[min_index]
best_inv_k <- 1 / best_k
best_error <- test_errors[min_index]
ggplot(df_plot, aes(x = k, y = Error, color = Set, linetype = Set)) +
geom_line(size = 1) +
geom_point(size = 2) +
geom_hline(yintercept = mean(test_errors), linetype = "dashed", color = "black", linewidth = 1) +
scale_color_manual(values = c("Train" = "steelblue", "Test" = "orangered")) +
labs(
title = "Error Rate vs K",
x = "K",
y = "Error Rate"
) +
theme_minimal() +
theme(legend.position = "bottom")
# Chunk 11
knn_pred <- knn(train = X_train_norm, test = X_test_norm, cl = y_train, k = 29)
# Chunk 12
#| echo: false
# Prediction for logistic
logistic_probs <- predict(lr_fit, new_data = test_data, type = "prob")$.pred_Yes
logistic_pred <- as.factor(ifelse(logistic_probs > 0.5, "Yes", "No"))
# Prediction for KNN
knn_pred <- ifelse(knn_pred == 1, yes = "No", no = "Yes")
# truth
truth_knn <- ifelse(y_test == 1, yes = "No", no = "Yes")
truth_log <- test_data$CHD
# Confusion matrix LOGISTIC
cm_log <- table(Predicted = logistic_pred, Actual = test_data$CHD)
TP_log <- sum(cm_log["Yes", "Yes"])
TN_log <- sum(cm_log["No", "No"])
FP_log <- sum(cm_log["Yes", "No"])
FN_log <- sum(cm_log["No", "Yes"])
log_acc <- (TP_log + TN_log) / (TP_log + TN_log + FP_log + FN_log)
log_prec <- TP_log / (TP_log + FP_log)
log_rec <- TP_log / (TP_log + FN_log)
log_f1 <- 2 * log_prec * log_rec / (log_prec + log_rec)
# Confusion matrix KNN
cm_knn <- table(Predicted = knn_pred, Actual = truth_knn)
TP_knn <- sum(cm_knn["Yes", "Yes"])
TN_knn <- sum(cm_knn["No", "No"])
FP_knn <- sum(cm_knn["Yes", "No"])
FN_knn <- sum(cm_knn["No", "Yes"])
knn_acc <- (TP_knn + TN_knn) / (TP_knn + TN_knn + FP_knn + FN_knn)
knn_prec <- TP_knn / (TP_knn + FP_knn)
knn_rec <- TP_knn / (TP_knn + FN_knn)
knn_f1 <- 2 * knn_prec * knn_rec / (knn_prec + knn_rec)
# Comparison table
model_eval <- data.frame(
Model = c("Logistic Regression", "KNN (k = 29)"),
Accuracy = c(log_acc, knn_acc),
Precision = c(log_prec, knn_prec),
Recall = c(log_rec, knn_rec),
F1_Score = c(log_f1, knn_f1)
)
print(model_eval)
# Chunk 13
#| echo: false
roc_score <- roc(response = as.numeric(test_data$CHD) - 1, predictor = logistic_probs)
roc_df <- data.frame(
FPR = 1 - roc_score$specificities,
TPR = roc_score$sensitivities
)
opt <- coords(roc_score, "best", best.method = "closest.topleft")
ggplot(roc_df, aes(x = FPR, y = TPR)) +
geom_line(color = "#0072B2", linewidth = 1.2) +
geom_abline(linetype = "dashed", color = "gray") +
annotate("point",
x = 1 - as.numeric(opt["specificity"]),
y = as.numeric(opt["sensitivity"]),
color = "red", size = 2.5) +
annotate("text", x = 0.6, y = 0.2,
label = paste0("AUC = ", round(auc(roc_score), 3)), size = 4) +
labs(
title = "ROC Curve – Logistic Regression",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)"
) +
theme_minimal()
print(paste("best_threshold:", opt$threshold))
renv::init()
git init
